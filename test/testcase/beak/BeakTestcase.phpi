public function setUp(){
  $this->set();
  $brl = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_CREATE_COL,array(),array(Beak::COMMENT_KIND_RENEW));
  $ret = BeakController::beakSimpleQuery($brl);
  $this->defaultData = array( 'key' => 'value' ,
                              'int' => 1,
                              'list' => array('foo','bar','baz'),
                              'hash' => array(
                                'foo' => 'FOO',
                                'bar' => 'BAR',
                                'baz' => 'BAZ') );
  
  $datas = array();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_SET,array());
  $data = $this->defaultData;
  $datas[] = array($brl , $data);
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','file1',Beak::M_SET,array());
  $data = $this->defaultData;
  $datas[] = array($brl , $data);
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','file2',Beak::M_SET,array());
  $data = $this->defaultData;
  $datas[] = array($brl , $data);
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/',Beak::M_SET,array());
  $data = $this->defaultData;
  $datas[] = array($brl , $data);
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array());
  $data = $this->defaultData;
  $datas[] = array($brl , $data);
  $datas = BeakController::beakQuery($datas);
  
  $this->wait();
}
public function tearDown(){
}

public static function tearDownAfterClass() {
}

// @@@ revision ( seta del dela)
public function testBeakUpdateRev(){
# Update with REV
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_REV,Beak::COMMENT_KIND_OP_SET));
  $data = array('add' => 'ADD');
  $datas = BeakController::beakSimpleQuery($brl,$data);
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  $expects = 'ADD';
  $actual  = $datas['add'];
  $this->assertEquals($expects,$actual);
  $this->assertTrue(isset($datas[Beak::ATTR_REV]),'Rev column not found !');
# Update success by ignoreing REV
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_REV,Beak::COMMENT_KIND_OP_SET));
  $data = array('add2' => 'ADD2');
  $datas = BeakController::beakSimpleQuery($brl,$data);
  $this->assertTrue($datas,'Upload failure !');
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  $expects = 'ADD2';
  $actual  = $datas['add2'];
  $this->assertEquals($expects,$actual);
# Update failure by REV
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_REV,Beak::COMMENT_KIND_OP_SET));
  $data = array('add3' => 'ADD3',Beak::ATTR_REV => 1);
  $datas = BeakController::beakSimpleQuery($brl,$data);
  $actual  = $datas;
  $this->assertFalse($datas,'Unexpected success to update');
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  $this->assertFalse(isset($datas['add3']),'Unexpected column');
}

public function testBeakUpdate(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_OP_SET));
  $data = array('add' => 'ADD');
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX => 'path/to','add' => 'ADD'));
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}
public function testBeakReplace(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET);
  $data = array(Beak::Q_UNIQUE_INDEX => 'path/to','replace' => 'REP');
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  ksort($data);
  $expects = json_encode($data);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}
public function testBeakUpdateInc(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_OP_INC));
  $data = array('int' => 1 );
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX => 'path/to','int' => 2 ));
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}
public function testBeakUpdateUnset(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_OP_UNSET));
  $data = array('int' => 1 );
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX => 'path/to'));
  unset($exp['int']);
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}
public function testBeakUpdatePush(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_OP_PUSH));
  $data = array('list' => 'foobar');
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX => 'path/to'));
  $exp['list'] [] = 'foobar';
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}
public function testBeakUpdatePushAll(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_OP_PUSHALL));
  $data = array('list' => array('foobar','xyzzy'));
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX => 'path/to'));
  $exp['list'] [] = 'foobar';
  $exp['list'] [] = 'xyzzy';
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}
public function testBeakUpdatePop1(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_OP_POP));
  $data = array('list' => 1);
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX => 'path/to'));
  array_pop($exp['list']);
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}
public function testBeakUpdatePop2(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_OP_POP));
  $data = array('list' => -1);
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX => 'path/to'));
  array_shift($exp['list']);
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}
public function testBeakUpdateRename(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_SET,array(),array(Beak::COMMENT_KIND_OP_RENAME));
  $data = array('list' => 'list2');
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX => 'path/to'));
  $exp['list2'] = $exp['list'];
  unset($exp['list']);
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}


public function testBeakSets(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_SET_ARRAY,array(),array(Beak::COMMENT_KIND_OP_SET));
  $data = array(
    array(Beak::Q_UNIQUE_INDEX => 'path/to','add' => 'ADD'),
    array(Beak::Q_UNIQUE_INDEX => 'path/new','add' => 'NEW'));
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX => 'path/to','add' => 'ADD'));
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  
  $this->assertEquals($expects,$actual);
  
}
public function testBeakDel(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_DEL);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $this->wait();
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','path/to',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  $actual   = json_encode($datas);
  $expects  = 'null';
  $this->assertEquals($expects,$actual);
}
public function testBeakDels(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_DEL_ARRAY);
  $data [Beak::Q_UNIQUE_INDEX]= array('path/to','file1');
  $datas = BeakController::beakSimpleQuery($brl,$data);
  
  $this->wait();

  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_ARRAY);
  $data [Beak::Q_UNIQUE_INDEX]= array('path/to','file1');
  $datas = BeakController::beakSimpleQuery($brl,$data);

  $actual   = json_encode($datas);
  $expects  = '[]';
  $this->assertEquals($expects,$actual);
}

public function testBeakSimpleGet(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX=>''));
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}
public function testBeakFilteredGet(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET,array(Beak::Q_FILTERS=>'key,int,ignore'));
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp['int'] = $this->defaultData['int'];
  $exp['key'] = $this->defaultData['key'];
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}
public function testBeakExceptedGet(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET,array(Beak::Q_EXCEPTS=>'key,int,ignore'));
  $datas = BeakController::beakSimpleQuery($brl);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX=>''));
  unset($exp['key']);
  unset($exp['int']);
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas);
  $actual  = json_encode($datas);
  $this->assertEquals($expects,$actual);
}

public function testBeakSimpleGets() {
  $brls = array();
  $brl1  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET);
  $brl2  = brlgen(Def::BP_LAYOUT,'unittest','device','/path/to',Beak::M_GET);
  $brls [] = $brl1;
  $brls [] = $brl2;
  $datas = BeakController::beakQuery($brls);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX=>''));
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas[$brl1]);
  $actual  = json_encode($datas[$brl1]);
  $this->assertEquals($expects,$actual);
  
  $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX=>'path/to'));
  ksort($exp);
  $expects = json_encode($exp);
  ksort($datas[$brl2]);
  $actual  = json_encode($datas[$brl2]);
  $this->assertEquals($expects,$actual);
}

public function testBeakSimpleGetF1(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','/nothing',Beak::M_GET);
  $datas = BeakController::beakSimpleQuery($brl);
  $expects = null;
  $actual  = $datas;
  $this->assertEquals($expects,$datas);
}
public function testBeakSimpleGetF2(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','/nothing',Beak::M_GET,array(),array('critical'));
  try {
    $datas = BeakController::beakSimpleQuery($brl);
  }catch( \Exception $e){
    return;
  }
  $this->assertTrue(FALSE, 'Should not to be successful.');
}
public function testBeakSimpleGetF3(){
  try {
    $brl  = 'invalid://test.device./nothing?get';
    $datas = BeakController::beakSimpleQuery($brl);
  }catch( \Exception $e){
    return;
  }
  $this->assertTrue(FALSE, 'Should not to be successful.');
}
public function testBeakSimpleGetF4(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','/nothing','foo');
  try {
    $datas = BeakController::beakSimpleQuery($brl);
  }catch( \Exception $e){
    return;
  }
  $this->assertTrue(FALSE, 'Should not to be successful.');
}

public function testBeakGets(){
  $keys = array('','invalid','path/to','file1');
  $arg = array(Beak::Q_UNIQUE_INDEX => $keys);
  // create query
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_ARRAY);
  $datas = BeakController::beakSimpleQuery($brl,$arg);
  foreach ( $keys as $key ){
    ksort($datas);
    if ( $key === 'invalid' ) {
      $this->assertFalse(is_array($datas[$key]), 'Unexpected success !!' . $key);
    }else {
      $exp = array_merge($this->defaultData,array(Beak::Q_UNIQUE_INDEX=>$key));
      ksort($exp);
      $expects = json_encode($exp);
      ksort($datas[$key]);
      $actual  = json_encode($datas[$key]);
      $this->assertTrue(is_array($datas[$key]), 'Fail to get.' . $key);
      $this->assertEquals($expects,$actual);
    }
  }
}

public function wait() {
  usleep(50000);
}
