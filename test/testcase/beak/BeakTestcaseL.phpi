public function testBeakKeyListAll(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_KEY_LIST);
  $datas = BeakController::beakQuery(array($brl));
  $exp = array('','file1','file2','path/','path/to');
  sort($exp);
  $expects  = json_encode($exp);
  sort($datas[$brl]);
  $actual   = json_encode($datas[$brl]);
  $this->assertEquals($expects,$actual);
}

public function testBeakColList(){
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','','',Beak::M_COL_LIST);
  $datas = BeakController::beakQuery(array($brl));
  $expects  = json_encode(array('device'));
  ksort($datas[$brl]);
  $actual   = json_encode($datas[$brl]);
  $this->assertEquals($expects,$actual);
}

public function genData(){
  // Create index and Input data
  $brl = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_CREATE_COL,array(Beak::Q_INDEXES=>'key,int'),array());
  $ret = BeakController::beakQuery(array($brl));
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','A',Beak::M_SET,array());
  $data = array('key'=>'value1','int' => 2);
  $datas[] = array($brl , $data);
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','B',Beak::M_SET,array());
  $data = array('key'=>'value2','int' => 2);
  $datas[] = array($brl , $data);
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','C/D',Beak::M_SET,array());
  $data = array('key'=>'value3','int' => 3);
  $datas[] = array($brl , $data);
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','C/D/F',Beak::M_SET,array());
  $data = array('key'=>'value2','int' => 4);
  $datas[] = array($brl , $data);
  $datas = BeakController::beakQuery($datas);
}
public function testBeakIndex1(){
  $this->genData();

  // Fetch by int
  $arg = array('int' => array(2,3));
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_ARRAY);
  $datas = BeakController::beakQuery(array(array($brl,$arg)));
  ksort($datas[$brl]);
  foreach ( $datas[$brl] as $key => $data ){
    ksort($datas[$brl][$key]);
  }
  $actual = json_encode(array_keys($datas[$brl]));
  $expects= '["A","B","C\/D"]';
  $this->assertEquals($expects,$actual);
}
public function testBeakIndex2(){
  $this->genData();
  // Fetch by key
  $arg = array('key' => array('value1','value2'));
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_ARRAY);
  $datas = BeakController::beakQuery(array(array($brl,$arg)));
  ksort($datas[$brl]);
  $actual = json_encode(array_keys($datas[$brl]));
  $expects= '["A","B","C\/D\/F"]';
  $this->assertEquals($expects,$actual);
}

public function testBeakRangeGet0(){
  $this->genData();

  // Fetch by int ($gt)
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_RANGE);
  $arg = array();
  $datas = BeakController::beakQuery(array(array($brl,$arg)));
  sort($datas[$brl]);
  $actual = json_encode(array_map(function($v){return $v['_u'];},$datas[$brl]));
  $this->assertEquals('["A","B","C\/D\/F","C\/D","","file1","file2","path\/","path\/to"]',$actual);
}
public function testBeakRangeGet1(){
  $this->genData();

  // Fetch by int ($gt)
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_RANGE);
  $arg = array('int' => array('$gt'=>2));
  $datas = BeakController::beakQuery(array(array($brl,$arg)));
  sort($datas[$brl]);
  $actual = json_encode(array_map(function($v){return $v['_u'];},$datas[$brl]));
  $this->assertEquals('["C\/D\/F","C\/D"]',$actual);
}
public function testBeakRangeGet2(){
  $this->genData();

  // Fetch by int ($gt , $lt)
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_RANGE);
  $arg = array('int' => array('$gt'=>2,'$lt' => 4));
  $datas = BeakController::beakQuery(array(array($brl,$arg)));
  sort($datas[$brl]);
  $actual = json_encode(array_map(function($v){return $v['_u'];},$datas[$brl]));
  $this->assertEquals('["C\/D"]',$actual);
}
public function testBeakRangeGet3(){
  $this->genData();

  // Fetch by int ($gte , $lte)
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_RANGE);
  $arg = array('int' => array('$gte'=>3,'$lte' => 4));
  $datas = BeakController::beakQuery(array(array($brl,$arg)));
  sort($datas[$brl]);
  $actual = json_encode(array_map(function($v){return $v['_u'];},$datas[$brl]));
  $this->assertEquals('["C\/D\/F","C\/D"]',$actual);
}
public function testBeakRangeGet4(){
  $this->genData();

  // Fetch by _u ($gt , $lte)
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_RANGE);
  $arg = array('_u' => array('$gt'=>'B','$lte' => 'C/D/F'));
  $datas = BeakController::beakQuery(array(array($brl,$arg)));
  sort($datas[$brl]);
  $actual = json_encode(array_map(function($v){return $v['_u'];},$datas[$brl]));
  $this->assertEquals('["C\/D\/F","C\/D"]',$actual);
}

public function testBeakRangeGet_sort1(){
  $this->genData();

  // Fetch by int ($gt)
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_RANGE,array(Beak::Q_SORT=>'key:-1'));
  $arg = array();
  $datas = BeakController::beakQuery(array(array($brl,$arg)));

  $actual = json_encode(array_map(function($v){return $v['_u'];},$datas[$brl]));
  $this->assertEquals('["C\/D","C\/D\/F","B","A","path\/to","path\/","file2","file1",""]',$actual);
}

public function testBeakRangeGet_sort2(){
  $this->genData();

  // Fetch by int ($gt)
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_RANGE,array(Beak::Q_SORT=>'key:1'));
  $arg = array();
  $datas = BeakController::beakQuery(array(array($brl,$arg)));

  $actual = json_encode(array_map(function($v){return $v['_u'];},$datas[$brl]));
  $this->assertEquals('["","file1","file2","path\/","path\/to","A","B","C\/D\/F","C\/D"]',$actual);
}

public function testBeakRangeGet_skip_limit(){
  $this->genData();

  // Fetch by int ($gt)
  $brl  = brlgen(Def::BP_LAYOUT,'unittest','device','',Beak::M_GET_RANGE,array(Beak::Q_SORT=>'key:1',Beak::Q_SKIP=>3,Beak::Q_LIMIT=>4));
  $arg = array();
  $datas = BeakController::beakQuery(array(array($brl,$arg)));

  $actual = json_encode(array_map(function($v){return $v['_u'];},$datas[$brl]));
  $this->assertEquals('["path\/","path\/to","A","B"]',$actual);
}
