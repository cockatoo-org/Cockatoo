{"etag":"\"1833ff86-a3e3-500c-d4638b0bf0bd7edd\"","type":"text\/javascript","exp":"86400","desc":null,"data":"\/*\nFlot plugin for adding panning and zooming capabilities to a plot.\n\nThe default behaviour is double click and scrollwheel up\/down to zoom\nin, drag to pan. The plugin defines plot.zoom({ center }),\nplot.zoomOut() and plot.pan(offset) so you easily can add custom\ncontrols. It also fires a \"plotpan\" and \"plotzoom\" event when\nsomething happens, useful for synchronizing plots.\n\nOptions:\n\n  zoom: {\n    interactive: false\n    trigger: \"dblclick\" \/\/ or \"click\" for single click\n    amount: 1.5         \/\/ 2 = 200% (zoom in), 0.5 = 50% (zoom out)\n  }\n  \n  pan: {\n    interactive: false\n    cursor: \"move\"      \/\/ CSS mouse cursor value used when dragging, e.g. \"pointer\"\n    frameRate: 20\n  }\n\n  xaxis, yaxis, x2axis, y2axis: {\n    zoomRange: null  \/\/ or [number, number] (min range, max range) or false\n    panRange: null   \/\/ or [number, number] (min, max) or false\n  }\n  \n\"interactive\" enables the built-in drag\/click behaviour. If you enable\ninteractive for pan, then you'll have a basic plot that supports\nmoving around; the same for zoom.\n\n\"amount\" specifies the default amount to zoom in (so 1.5 = 150%)\nrelative to the current viewport.\n\n\"cursor\" is a standard CSS mouse cursor string used for visual\nfeedback to the user when dragging.\n\n\"frameRate\" specifies the maximum number of times per second the plot\nwill update itself while the user is panning around on it (set to null\nto disable intermediate pans, the plot will then not update until the\nmouse button is released).\n\n\"zoomRange\" is the interval in which zooming can happen, e.g. with\nzoomRange: [1, 100] the zoom will never scale the axis so that the\ndifference between min and max is smaller than 1 or larger than 100.\nYou can set either end to null to ignore, e.g. [1, null]. If you set\nzoomRange to false, zooming on that axis will be disabled.\n\n\"panRange\" confines the panning to stay within a range, e.g. with\npanRange: [-10, 20] panning stops at -10 in one end and at 20 in the\nother. Either can be null, e.g. [-10, null]. If you set\npanRange to false, panning on that axis will be disabled.\n\nExample API usage:\n\n  plot = $.plot(...);\n  \n  \/\/ zoom default amount in on the pixel (10, 20) \n  plot.zoom({ center: { left: 10, top: 20 } });\n\n  \/\/ zoom out again\n  plot.zoomOut({ center: { left: 10, top: 20 } });\n\n  \/\/ zoom 200% in on the pixel (10, 20) \n  plot.zoom({ amount: 2, center: { left: 10, top: 20 } });\n  \n  \/\/ pan 100 pixels to the left and 20 down\n  plot.pan({ left: -100, top: 20 })\n\nHere, \"center\" specifies where the center of the zooming should\nhappen. Note that this is defined in pixel space, not the space of the\ndata points (you can use the p2c helpers on the axes in Flot to help\nyou convert between these).\n\n\"amount\" is the amount to zoom the viewport relative to the current\nrange, so 1 is 100% (i.e. no change), 1.5 is 150% (zoom in), 0.7 is\n70% (zoom out). You can set the default in the options.\n  \n*\/\n\n\n\/\/ First two dependencies, jquery.event.drag.js and\n\/\/ jquery.mousewheel.js, we put them inline here to save people the\n\/\/ effort of downloading them.\n\n\/*\njquery.event.drag.js ~ v1.5 ~ Copyright (c) 2008, Three Dub Media (http:\/\/threedubmedia.com)  \nLicensed under the MIT License ~ http:\/\/threedubmedia.googlecode.com\/files\/MIT-LICENSE.txt\n*\/\n(function(E){E.fn.drag=function(L,K,J){if(K){this.bind(\"dragstart\",L)}if(J){this.bind(\"dragend\",J)}return !L?this.trigger(\"drag\"):this.bind(\"drag\",K?K:L)};var A=E.event,B=A.special,F=B.drag={not:\":input\",distance:0,which:1,dragging:false,setup:function(J){J=E.extend({distance:F.distance,which:F.which,not:F.not},J||{});J.distance=I(J.distance);A.add(this,\"mousedown\",H,J);if(this.attachEvent){this.attachEvent(\"ondragstart\",D)}},teardown:function(){A.remove(this,\"mousedown\",H);if(this===F.dragging){F.dragging=F.proxy=false}G(this,true);if(this.detachEvent){this.detachEvent(\"ondragstart\",D)}}};B.dragstart=B.dragend={setup:function(){},teardown:function(){}};function H(L){var K=this,J,M=L.data||{};if(M.elem){K=L.dragTarget=M.elem;L.dragProxy=F.proxy||K;L.cursorOffsetX=M.pageX-M.left;L.cursorOffsetY=M.pageY-M.top;L.offsetX=L.pageX-L.cursorOffsetX;L.offsetY=L.pageY-L.cursorOffsetY}else{if(F.dragging||(M.which>0&&L.which!=M.which)||E(L.target).is(M.not)){return }}switch(L.type){case\"mousedown\":E.extend(M,E(K).offset(),{elem:K,target:L.target,pageX:L.pageX,pageY:L.pageY});A.add(document,\"mousemove mouseup\",H,M);G(K,false);F.dragging=null;return false;case !F.dragging&&\"mousemove\":if(I(L.pageX-M.pageX)+I(L.pageY-M.pageY)<M.distance){break}L.target=M.target;J=C(L,\"dragstart\",K);if(J!==false){F.dragging=K;F.proxy=L.dragProxy=E(J||K)[0]}case\"mousemove\":if(F.dragging){J=C(L,\"drag\",K);if(B.drop){B.drop.allowed=(J!==false);B.drop.handler(L)}if(J!==false){break}L.type=\"mouseup\"}case\"mouseup\":A.remove(document,\"mousemove mouseup\",H);if(F.dragging){if(B.drop){B.drop.handler(L)}C(L,\"dragend\",K)}G(K,true);F.dragging=F.proxy=M.elem=false;break}return true}function C(M,K,L){M.type=K;var J=E.event.handle.call(L,M);return J===false?false:J||M.result}function I(J){return Math.pow(J,2)}function D(){return(F.dragging===false)}function G(K,J){if(!K){return }K.unselectable=J?\"off\":\"on\";K.onselectstart=function(){return J};if(K.style){K.style.MozUserSelect=J?\"\":\"none\"}}})(jQuery);\n\n\n\/* jquery.mousewheel.min.js\n * Copyright (c) 2009 Brandon Aaron (http:\/\/brandonaaron.net)\n * Dual licensed under the MIT (http:\/\/www.opensource.org\/licenses\/mit-license.php)\n * and GPL (http:\/\/www.opensource.org\/licenses\/gpl-license.php) licenses.\n * Thanks to: http:\/\/adomas.org\/javascript-mouse-wheel\/ for some pointers.\n * Thanks to: Mathias Bank(http:\/\/www.mathias-bank.de) for a scope bug fix.\n *\n * Version: 3.0.2\n * \n * Requires: 1.2.2+\n *\/\n(function(c){var a=[\"DOMMouseScroll\",\"mousewheel\"];c.event.special.mousewheel={setup:function(){if(this.addEventListener){for(var d=a.length;d;){this.addEventListener(a[--d],b,false)}}else{this.onmousewheel=b}},teardown:function(){if(this.removeEventListener){for(var d=a.length;d;){this.removeEventListener(a[--d],b,false)}}else{this.onmousewheel=null}}};c.fn.extend({mousewheel:function(d){return d?this.bind(\"mousewheel\",d):this.trigger(\"mousewheel\")},unmousewheel:function(d){return this.unbind(\"mousewheel\",d)}});function b(f){var d=[].slice.call(arguments,1),g=0,e=true;f=c.event.fix(f||window.event);f.type=\"mousewheel\";if(f.wheelDelta){g=f.wheelDelta\/120}if(f.detail){g=-f.detail\/3}d.unshift(f,g);return c.event.handle.apply(this,d)}})(jQuery);\n\n\n\n\n(function ($) {\n    var options = {\n        xaxis: {\n            zoomRange: null, \/\/ or [number, number] (min range, max range)\n            panRange: null \/\/ or [number, number] (min, max)\n        },\n        zoom: {\n            interactive: false,\n            trigger: \"dblclick\", \/\/ or \"click\" for single click\n            amount: 1.5 \/\/ how much to zoom relative to current position, 2 = 200% (zoom in), 0.5 = 50% (zoom out)\n        },\n        pan: {\n            interactive: false,\n            cursor: \"move\",\n            frameRate: 20\n        }\n    };\n\n    function init(plot) {\n        function onZoomClick(e, zoomOut) {\n            var c = plot.offset();\n            c.left = e.pageX - c.left;\n            c.top = e.pageY - c.top;\n            if (zoomOut)\n                plot.zoomOut({ center: c });\n            else\n                plot.zoom({ center: c });\n        }\n\n        function onMouseWheel(e, delta) {\n            onZoomClick(e, delta < 0);\n            return false;\n        }\n        \n        var prevCursor = 'default', prevPageX = 0, prevPageY = 0,\n            panTimeout = null;\n\n        function onDragStart(e) {\n            if (e.which != 1)  \/\/ only accept left-click\n                return false;\n            var c = plot.getPlaceholder().css('cursor');\n            if (c)\n                prevCursor = c;\n            plot.getPlaceholder().css('cursor', plot.getOptions().pan.cursor);\n            prevPageX = e.pageX;\n            prevPageY = e.pageY;\n        }\n        \n        function onDrag(e) {\n            var frameRate = plot.getOptions().pan.frameRate;\n            if (panTimeout || !frameRate)\n                return;\n\n            panTimeout = setTimeout(function () {\n                plot.pan({ left: prevPageX - e.pageX,\n                           top: prevPageY - e.pageY });\n                prevPageX = e.pageX;\n                prevPageY = e.pageY;\n                                                    \n                panTimeout = null;\n            }, 1 \/ frameRate * 1000);\n        }\n\n        function onDragEnd(e) {\n            if (panTimeout) {\n                clearTimeout(panTimeout);\n                panTimeout = null;\n            }\n                    \n            plot.getPlaceholder().css('cursor', prevCursor);\n            plot.pan({ left: prevPageX - e.pageX,\n                       top: prevPageY - e.pageY });\n        }\n        \n        function bindEvents(plot, eventHolder) {\n            var o = plot.getOptions();\n            if (o.zoom.interactive) {\n                eventHolder[o.zoom.trigger](onZoomClick);\n                eventHolder.mousewheel(onMouseWheel);\n            }\n\n            if (o.pan.interactive) {\n                eventHolder.bind(\"dragstart\", { distance: 10 }, onDragStart);\n                eventHolder.bind(\"drag\", onDrag);\n                eventHolder.bind(\"dragend\", onDragEnd);\n            }\n        }\n\n        plot.zoomOut = function (args) {\n            if (!args)\n                args = {};\n            \n            if (!args.amount)\n                args.amount = plot.getOptions().zoom.amount\n\n            args.amount = 1 \/ args.amount;\n            plot.zoom(args);\n        }\n        \n        plot.zoom = function (args) {\n            if (!args)\n                args = {};\n            \n            var c = args.center,\n                amount = args.amount || plot.getOptions().zoom.amount,\n                w = plot.width(), h = plot.height();\n\n            if (!c)\n                c = { left: w \/ 2, top: h \/ 2 };\n                \n            var xf = c.left \/ w,\n                yf = c.top \/ h,\n                minmax = {\n                    x: {\n                        min: c.left - xf * w \/ amount,\n                        max: c.left + (1 - xf) * w \/ amount\n                    },\n                    y: {\n                        min: c.top - yf * h \/ amount,\n                        max: c.top + (1 - yf) * h \/ amount\n                    }\n                };\n\n            $.each(plot.getAxes(), function(_, axis) {\n                var opts = axis.options,\n                    min = minmax[axis.direction].min,\n                    max = minmax[axis.direction].max,\n                    zr = opts.zoomRange;\n\n                if (zr === false) \/\/ no zooming on this axis\n                    return;\n                    \n                min = axis.c2p(min);\n                max = axis.c2p(max);\n                if (min > max) {\n                    \/\/ make sure min < max\n                    var tmp = min;\n                    min = max;\n                    max = tmp;\n                }\n\n                var range = max - min;\n                if (zr &&\n                    ((zr[0] != null && range < zr[0]) ||\n                     (zr[1] != null && range > zr[1])))\n                    return;\n            \n                opts.min = min;\n                opts.max = max;\n            });\n            \n            plot.setupGrid();\n            plot.draw();\n            \n            if (!args.preventEvent)\n                plot.getPlaceholder().trigger(\"plotzoom\", [ plot ]);\n        }\n\n        plot.pan = function (args) {\n            var delta = {\n                x: +args.left,\n                y: +args.top\n            };\n\n            if (isNaN(delta.x))\n                delta.x = 0;\n            if (isNaN(delta.y))\n                delta.y = 0;\n\n            $.each(plot.getAxes(), function (_, axis) {\n                var opts = axis.options,\n                    min, max, d = delta[axis.direction];\n\n                min = axis.c2p(axis.p2c(axis.min) + d),\n                max = axis.c2p(axis.p2c(axis.max) + d);\n\n                var pr = opts.panRange;\n                if (pr === false) \/\/ no panning on this axis\n                    return;\n                \n                if (pr) {\n                    \/\/ check whether we hit the wall\n                    if (pr[0] != null && pr[0] > min) {\n                        d = pr[0] - min;\n                        min += d;\n                        max += d;\n                    }\n                    \n                    if (pr[1] != null && pr[1] < max) {\n                        d = pr[1] - max;\n                        min += d;\n                        max += d;\n                    }\n                }\n                \n                opts.min = min;\n                opts.max = max;\n            });\n            \n            plot.setupGrid();\n            plot.draw();\n            \n            if (!args.preventEvent)\n                plot.getPlaceholder().trigger(\"plotpan\", [ plot ]);\n        }\n\n        function shutdown(plot, eventHolder) {\n            eventHolder.unbind(plot.getOptions().zoom.trigger, onZoomClick);\n            eventHolder.unbind(\"mousewheel\", onMouseWheel);\n            eventHolder.unbind(\"dragstart\", onDragStart);\n            eventHolder.unbind(\"drag\", onDrag);\n            eventHolder.unbind(\"dragend\", onDragEnd);\n            if (panTimeout)\n                clearTimeout(panTimeout);\n        }\n        \n        plot.hooks.bindEvents.push(bindEvents);\n        plot.hooks.shutdown.push(shutdown);\n    }\n    \n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'navigate',\n        version: '1.3'\n    });\n})(jQuery);\n","_u":"js\/flot\/jquery.flot.navigate.js"}